name: Build and Publish Dev Release

on:
  workflow_dispatch:
    inputs:
      prerelease_suffix:
        description: "Prerelease suffix (e.g., alpha, beta, rc)"
        required: true
        default: "dev"
  workflow_run:
    workflows: ["Code Quality Control"]
    types:
      - completed
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-publish:
    # Run on manual trigger or when quality-control workflow succeeds on an open PR
    if: >-
      ${{ github.event_name == 'workflow_dispatch' ||
      (github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.event == 'pull_request') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # If triggered by workflow_run, we need to get the PR information
      - name: Get PR information
        if: ${{ github.event_name == 'workflow_run' }}
        uses: potiuk/get-workflow-origin@v1_5
        id: workflow-origin
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sourceRunId: ${{ github.event.workflow_run.id }}

      # Skip if PR is closed (we only want to run on open PRs)
      - name: Check if PR is open
        if: ${{ github.event_name == 'workflow_run' }}
        id: check_pr_state
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.workflow-origin.outputs.pullRequestNumber }}
        run: |
          if [ -n "$PR_NUMBER" ]; then
            PR_STATE=$(gh pr view $PR_NUMBER --json state -q .state)
            if [ "$PR_STATE" != "OPEN" ]; then
              echo "PR is not open, skipping build and publish"
              echo "skip=true" >> $GITHUB_OUTPUT
          else
              echo "skip=false" >> $GITHUB_OUTPUT
          fi
          else
            echo "No PR number found, skipping build and publish"
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_pr_state.outputs.skip != 'true' }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install Poetry
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_pr_state.outputs.skip != 'true' }}
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Configure Poetry for GitHub Packages
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_pr_state.outputs.skip != 'true' }}
        run: |
          poetry config repositories.github https://maven.pkg.github.com/${{ github.repository }}
          poetry config http-basic.github ${{ github.actor }} ${{ secrets.GITHUB_TOKEN }}

      - name: Set dev version
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_pr_state.outputs.skip != 'true' }}
        id: set_version
        run: |
          # Extract current version from pyproject.toml
          CURRENT_VERSION=$(poetry version -s)

          # Generate timestamp for unique build
          TIMESTAMP=$(date +%Y%m%d%H%M%S)

          # Set new dev version
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            SUFFIX="${{ github.event.inputs.prerelease_suffix }}"
          else
            SUFFIX="dev"
            # Add PR number if available
            if [ -n "${{ steps.workflow-origin.outputs.pullRequestNumber }}" ]; then
              SUFFIX="${SUFFIX}.pr${{ steps.workflow-origin.outputs.pullRequestNumber }}"
            fi
          fi

          NEW_VERSION="${CURRENT_VERSION}.${SUFFIX}${TIMESTAMP}"
          echo "Setting version to $NEW_VERSION"
          poetry version $NEW_VERSION
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build package
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_pr_state.outputs.skip != 'true' }}
        run: |
          poetry build

      - name: Publish to GitHub Packages
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_pr_state.outputs.skip != 'true' }}
        run: |
          poetry publish --repository github

      - name: Create GitHub Release
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_pr_state.outputs.skip != 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.set_version.outputs.version }}
          name: Development Release v${{ steps.set_version.outputs.version }}
          body: |
            Development build from branch: ${{ github.ref_name }}
            Created automatically via GitHub Actions.
            ${{ steps.workflow-origin.outputs.pullRequestNumber != '' && format('Pull Request: #{0}', steps.workflow-origin.outputs.pullRequestNumber) || '' }}
          files: dist/*
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
