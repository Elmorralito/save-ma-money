# pylint: disable=C0103,W0611
"""initial version

Revision ID: e6a8e61de12d
Revises:
Create Date: 2025-09-22 21:53:30.516338+00:00

"""
from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel  # noqa: F401
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "e6a8e61de12d"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(sa.schema.CreateSchema("papita_transactions", if_not_exists=True))

    op.create_table(
        "accounts",
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("tags", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("start_ts", sa.TIMESTAMP(), nullable=False),
        sa.Column("end_ts", sa.TIMESTAMP(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="papita_transactions",
    )
    op.create_index(
        op.f("ix_papita_transactions_accounts_end_ts"),
        "accounts",
        ["end_ts"],
        unique=False,
        schema="papita_transactions",
    )
    op.create_index(
        op.f("ix_papita_transactions_accounts_name"),
        "accounts",
        ["name"],
        unique=False,
        schema="papita_transactions",
    )
    op.create_index(
        op.f("ix_papita_transactions_accounts_start_ts"),
        "accounts",
        ["start_ts"],
        unique=False,
        schema="papita_transactions",
    )
    op.create_table(
        "types",
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("tags", sa.ARRAY(sa.String()), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="papita_transactions",
    )
    op.create_index(
        op.f("ix_papita_transactions_types_name"),
        "types",
        ["name"],
        unique=True,
        schema="papita_transactions",
    )
    op.create_table(
        "identified_transactions",
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("type_id", sa.Uuid(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("tags", sa.ARRAY(sa.String()), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("planned_value", sa.DECIMAL(), nullable=False),
        sa.Column("planned_transaction_day", sa.SmallInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["type_id"],
            ["papita_transactions.types.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="papita_transactions",
    )
    op.create_index(
        op.f("ix_papita_transactions_identified_transactions_name"),
        "identified_transactions",
        ["name"],
        unique=False,
        schema="papita_transactions",
    )
    op.create_table(
        "liability_accounts",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.Column("type_id", sa.Uuid(), nullable=False),
        sa.Column("months_per_period", sa.SmallInteger(), nullable=True),
        sa.Column("initial_value", sa.DECIMAL(), nullable=False),
        sa.Column("present_value", sa.DECIMAL(), nullable=False),
        sa.Column("monthly_interest_rate", sa.DECIMAL(), nullable=True),
        sa.Column("yearly_interest_rate", sa.DECIMAL(), nullable=True),
        sa.Column("payment", sa.DECIMAL(), nullable=False),
        sa.Column("total_paid", sa.DECIMAL(), nullable=False),
        sa.Column("overall_periods", sa.SmallInteger(), nullable=False),
        sa.Column("periods_paid", sa.SmallInteger(), nullable=False),
        sa.Column("closing_day", sa.SmallInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["papita_transactions.accounts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["type_id"],
            ["papita_transactions.types.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="papita_transactions",
    )
    op.create_table(
        "bank_credit_liability_accounts",
        sa.Column("liability_account_id", sa.Uuid(), nullable=False),
        sa.Column("insurance_payment", sa.DECIMAL(), nullable=False),
        sa.Column("extras_payment", sa.DECIMAL(), nullable=False),
        sa.ForeignKeyConstraint(
            ["liability_account_id"],
            ["papita_transactions.liability_accounts.id"],
        ),
        sa.PrimaryKeyConstraint("liability_account_id"),
        schema="papita_transactions",
    )
    op.create_table(
        "credit_card_liability_accounts",
        sa.Column("liability_account_id", sa.Uuid(), nullable=False),
        sa.Column("credit_limit", sa.DECIMAL(), nullable=False),
        sa.ForeignKeyConstraint(
            ["liability_account_id"],
            ["papita_transactions.liability_accounts.id"],
        ),
        sa.PrimaryKeyConstraint("liability_account_id"),
        schema="papita_transactions",
    )
    op.create_table(
        "transactions",
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("identified_transaction_id", sa.Uuid(), nullable=True),
        sa.Column("from_account_id", sa.Uuid(), nullable=True),
        sa.Column("to_account_id", sa.Uuid(), nullable=True),
        sa.Column("transaction_ts", sa.TIMESTAMP(), nullable=False),
        sa.Column("value", sa.DECIMAL(), nullable=False),
        sa.ForeignKeyConstraint(
            ["from_account_id"],
            ["papita_transactions.accounts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["identified_transaction_id"],
            ["papita_transactions.identified_transactions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["to_account_id"],
            ["papita_transactions.accounts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="papita_transactions",
    )
    op.create_index(
        op.f("ix_papita_transactions_transactions_transaction_ts"),
        "transactions",
        ["transaction_ts"],
        unique=False,
        schema="papita_transactions",
    )
    op.create_table(
        "asset_accounts",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.Column("type_id", sa.Uuid(), nullable=False),
        sa.Column("bank_credit_liability_account_id", sa.Uuid(), nullable=True),
        sa.Column("months_per_period", sa.SmallInteger(), nullable=False),
        sa.Column("initial_value", sa.DECIMAL(), nullable=True),
        sa.Column("last_value", sa.DECIMAL(), nullable=True),
        sa.Column("monthly_interest_rate", sa.DECIMAL(), nullable=True),
        sa.Column("yearly_interest_rate", sa.DECIMAL(), nullable=True),
        sa.Column("roi", sa.DECIMAL(), nullable=True),
        sa.Column("periodical_earnings", sa.DECIMAL(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["papita_transactions.accounts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["bank_credit_liability_account_id"],
            ["papita_transactions.bank_credit_liability_accounts.liability_account_id"],
        ),
        sa.ForeignKeyConstraint(
            ["type_id"],
            ["papita_transactions.types.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="papita_transactions",
    )
    op.create_table(
        "banking_asset_accounts",
        sa.Column("asset_account_id", sa.Uuid(), nullable=False),
        sa.Column("entity", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_number", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["asset_account_id"],
            ["papita_transactions.asset_accounts.id"],
        ),
        sa.PrimaryKeyConstraint("asset_account_id"),
        schema="papita_transactions",
    )
    op.create_index(
        op.f("ix_papita_transactions_banking_asset_accounts_account_number"),
        "banking_asset_accounts",
        ["account_number"],
        unique=False,
        schema="papita_transactions",
    )
    op.create_index(
        op.f("ix_papita_transactions_banking_asset_accounts_entity"),
        "banking_asset_accounts",
        ["entity"],
        unique=False,
        schema="papita_transactions",
    )
    op.create_table(
        "real_state_asset_accounts",
        sa.Column("asset_account_id", sa.Uuid(), nullable=False),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("city", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("country", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("total_area", sa.DECIMAL(), nullable=False),
        sa.Column("built_area", sa.DECIMAL(), nullable=False),
        sa.Column(
            "area_unit",
            sa.Enum(
                "SQ_MT",
                "SQ_FT",
                "ACRES",
                "HECTARES",
                "BLOCKS",
                name="realstateassetaccountsareaunits",
            ),
            nullable=False,
        ),
        sa.Column(
            "ownership",
            sa.Enum("FULL", "PARTIAL", name="realstateassetaccountsownership"),
            nullable=False,
        ),
        sa.Column("participation", sa.DECIMAL(), nullable=False),
        sa.ForeignKeyConstraint(
            ["asset_account_id"],
            ["papita_transactions.asset_accounts.id"],
        ),
        sa.PrimaryKeyConstraint("asset_account_id"),
        schema="papita_transactions",
    )
    op.create_table(
        "trading_asset_accounts",
        sa.Column("asset_account_id", sa.Uuid(), nullable=False),
        sa.Column("buy_value", sa.DECIMAL(), nullable=False),
        sa.Column("last_value", sa.DECIMAL(), nullable=True),
        sa.Column("units", sa.SmallInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["asset_account_id"],
            ["papita_transactions.asset_accounts.id"],
        ),
        sa.PrimaryKeyConstraint("asset_account_id"),
        schema="papita_transactions",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("trading_asset_accounts", schema="papita_transactions")
    op.drop_table("real_state_asset_accounts", schema="papita_transactions")
    op.drop_index(
        op.f("ix_papita_transactions_banking_asset_accounts_entity"),
        table_name="banking_asset_accounts",
        schema="papita_transactions",
    )
    op.drop_index(
        op.f("ix_papita_transactions_banking_asset_accounts_account_number"),
        table_name="banking_asset_accounts",
        schema="papita_transactions",
    )
    op.drop_table("banking_asset_accounts", schema="papita_transactions")
    op.drop_table("asset_accounts", schema="papita_transactions")
    op.drop_index(
        op.f("ix_papita_transactions_transactions_transaction_ts"),
        table_name="transactions",
        schema="papita_transactions",
    )
    op.drop_table("transactions", schema="papita_transactions")
    op.drop_table("credit_card_liability_accounts", schema="papita_transactions")
    op.drop_table("bank_credit_liability_accounts", schema="papita_transactions")
    op.drop_table("liability_accounts", schema="papita_transactions")
    op.drop_index(
        op.f("ix_papita_transactions_identified_transactions_name"),
        table_name="identified_transactions",
        schema="papita_transactions",
    )
    op.drop_table("identified_transactions", schema="papita_transactions")
    op.drop_index(
        op.f("ix_papita_transactions_types_name"),
        table_name="types",
        schema="papita_transactions",
    )
    op.drop_table("types", schema="papita_transactions")
    op.drop_index(
        op.f("ix_papita_transactions_accounts_start_ts"),
        table_name="accounts",
        schema="papita_transactions",
    )
    op.drop_index(
        op.f("ix_papita_transactions_accounts_name"),
        table_name="accounts",
        schema="papita_transactions",
    )
    op.drop_index(
        op.f("ix_papita_transactions_accounts_end_ts"),
        table_name="accounts",
        schema="papita_transactions",
    )
    op.drop_table("accounts", schema="papita_transactions")
    # ### end Alembic commands ###
